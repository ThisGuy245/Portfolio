---
import Nav from '../../components/Nav.astro';
import Layout from '../../layouts/Layout.astro';
import ActivityCard from '../../components/ActivityCard.astro';
import { languages } from '../../i18n/ui';
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

export async function getStaticPaths() {
    return languages.map(lang => ({
        params: { lang: lang.key },
        props: { lang: lang.key }
    }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Activity {
    title: string;
    body: string;
    date: string;
    category: string;
    placeholderImg?: string;
    videoSrc?: string;
    fullContent: string;
}

const activities: Activity[] = [
    {
        title: t('BFX Festival 2024 - Best Mechanics Nominee'),
        body: t('Led development of multiplayer game under 48-hour deadline'),
        date: '2024-11-02',
        category: t('Games Development'),
        placeholderImg: '/BFX.png',
        fullContent: t('As team leader and producer for our BFX game jam entry, I spearheaded the technical direction and implemented all network programming using Unity Netcode. Managed a team of 5 developers, establishing Git workflows and coordinating our rapid development cycle. Designed the core multiplayer mechanics that earned us a nomination for Best Mechanics. Presented our project to judges and other teams, gaining valuable experience in team-based game development under extreme time pressure.')
    },
    {
        title: t('Studio Project - Elected Producer'),
        body: t('Pitched and led development of commercial-grade multiplayer game'),
        date: '2025-03-07',
        category: t('Games Development'),
        placeholderImg: '/media/GSP.png',
        fullContent: t('After presenting my vision for replayable multiplayer games with dark aesthetics, I was elected producer by my peers. Developed the technical roadmap for an 8-person student team creating a game designed to extend beyond academic requirements into commercial release. Established production pipelines, conducted code reviews, and mentored junior team members while implementing core gameplay systems.')
    },
    {
        title: t('Denix Studio - AI Engineer'),
        body: t('Core programmer at indie studio developing commercial title'),
        date: '2025-04-01',
        category: t('Professional Experience'),
        placeholderImg: '/Denix.png',
        fullContent: t('Working part-time as AI engineer and core programmer at Denix Studio (13-person indie team), contributing to commercial game development. My role focuses on implementing robust AI systems while adhering to industry-standard practices. This first professional experience provides valuable insight into studio workflows, version control at scale, and the realities of shipping commercial products in a flexible but demanding indie environment.')
    },/*
    {
        title: t('Technical Mentor - Coding Bootcamp'),
        body: t('Volunteered as mentor for underrepresented groups in tech'),
        date: '2025-04-10',
        category: t('Community'),
        placeholderImg: '/TA.webp',
        fullContent: t('Dedicated 12 weeks to mentoring aspiring developers from underrepresented backgrounds. Conducted code reviews, led debugging sessions, and taught fundamental programming concepts. Created specialized materials for game development track students, focusing on Unity workflows and multiplayer concepts drawn from my professional and academic experiences.')
    }*/
];

// Categorizing activities by type
function categorizeActivities(activities: Activity[]): Record<string, Activity[]> {
    return activities.reduce((acc: Record<string, Activity[]>, activity: Activity) => {
        const { category } = activity;
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(activity);
        return acc;
    }, {});
}

// Filter functionality
let selectedCategory: string = t('All');

function filterActivities(category: string, activities: Activity[]): Activity[] {
    selectedCategory = category;
    if (category === t('All')) {
        return activities;
    } else {
        return activities.filter(activity => activity.category === category);
    }
}

let filteredActivities: Activity[] = filterActivities(selectedCategory, activities);
---

<Layout title={t('My Activities')}>
    <Nav lang={lang} />
    <main>
        <!-- Activities Section -->
        <section id="activities">
            {Object.entries(categorizeActivities(filteredActivities)).map(([category, activities]) => (
                    <div>
                        <h3 class="category-header">{category}</h3>
                        <ul class="activity-cards">
                            {activities.map(activity => (
                                    <li>
                                        <ActivityCard activity={activity} />
                                    </li>
                            ))}
                        </ul>
                    </div>
            ))}
        </section>
    </main>
</Layout>

<style>
    /* Consistent with projects page styling */
    .category-header {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
        color: var(--accent-color);
        margin: 2rem 0;
        position: relative;
    }

    .category-header::after {
        content: '';
        display: block;
        width: 50%;
        height: 2px;
        background-color: var(--accent-color);
        margin: 0.5rem auto 0;
    }

    /* Activity Cards: Fixed sizes matching projects */
    .activity-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, 300px);
        justify-content: center;
        gap: 1.5rem;
        list-style: none;
        padding: 0;
    }

    @media (min-width: 768px) {
        .activity-cards {
            grid-template-columns: repeat(auto-fit, 300px);
        }
    }

    @media (min-width: 1024px) {
        .activity-cards {
            grid-template-columns: repeat(auto-fit, 300px);
        }
    }
</style>