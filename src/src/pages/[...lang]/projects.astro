---
import Nav from '../../components/Nav.astro';
import Layout from '../../layouts/Layout.astro';
import ProjectCard from '../../components/ProjectCard.astro';
import { languages } from '../../i18n/ui';
import { getLangFromUrl, useTranslations } from '../../i18n/utils';

export async function getStaticPaths() {
    return languages.map(lang => ({
        params: { lang: lang.key },
        props: { lang: lang.key }
    }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Project {
    title: string;
    body: string;
    href: string;
    placeholderImg?: string;
    videoSrc?: string;
    category: string;
    teamSize?: number;
    technologies: string[];
    websiteUrl?: string;
}

const projects: Project[] = [
    {
        title: t('Game Studio Project'),
        body: t('An 8-person project where I served as the overall producer. Team included 2 programmers, 4 designers, and 1 tech artist.'),
        href: `/${lang}/gamestudio`,
        placeholderImg: '/media/GSP.png',
        category: t('Games Programming'),
        teamSize: 8,
        technologies: ['c++', 'unreal', 'unity']
    },
    {
        title: t('Multiplayer Shooter'),
        body: t('Made for BFX Game Jam 2024, Group leader of a team of 5. Using NetCode in Unity and Nominee for Best Mechanics.'),
        href: `/${lang}/multishooter`,
        videoSrc: '/media/placeholder.mp4',
        category: t('Games Programming'),
        teamSize: 5,
        technologies: ['c#', 'unity']
    },
    {
        title: t('3D Graphics Programming'),
        body: t('A Doom-inspired level created using OpenGL and SDL2 with C++.'),
        href: `/${lang}/building`,
        videoSrc: '/media/doomlevel.mp4',
        category: t('Games Programming'),
        teamSize: 1,
        technologies: ['c++', 'opengl', 'sdl2']
    },
    {
        title: t('Web Invaders Game'),
        body: t('A 2D Space-Invaders type to raise awareness in the Cyber space. Built and showcased on the web, CLICK VIEW TO PLAY'),
        href: `/${lang}/building`,
        placeholderImg: '/media/WebInvaders.png',
        category: t('Games Programming'),
        websiteUrl: "https://game.je3.com/",
        teamSize: 1,
        technologies: ['javascript', 'html', 'css']
    },
    {
        title: t('Guesthouse Site'),
        body: t('A website for a guesthouse in Brittany to showcase the area nearby, localisation implemented'),
        href: `/${lang}/building`,
        placeholderImg: '/media/Domaine.jpg',
        category: t('Web Programming'),
        websiteUrl: "https://le-domaine.fr/en-GB/",
        teamSize: 1,
        technologies: ['Astro.svg', 'Svelte', 'typescript']
    },
    {
        title: t('Portfolio Website'),
        body: t('A personal website showcasing my work and projects. Built using astro.'),
        href: `/${lang}/building`,
        placeholderImg: '/media/Portfolio.jpg',
        category: t('Web Programming'),
        websiteUrl: "https://thomasisherwood.com/en/",
        teamSize: 1,
        technologies: ['astro', 'svelte', 'typescript']
    },
    {
        title: t('Studio Project OST'),
        body: t('Coming Soon tracks produced on Logic X Pro for an upcoming project.'),
        href: `/${lang}/building`,
        placeholderImg: '/path/to/music-placeholder.jpg',
        category: t('Sound Engineering'),
        technologies: ['logicpro']
    },
    {
        title: t('AI Game Engine'),
        body: t('A concept for a game engine navigated through AI, built purely with C++.'),
        href: `/${lang}/aigameengine`,
        placeholderImg: '/media/concept.png',
        category: t('Games Programming'),
        teamSize: 1,
        technologies: ['c++', 'ai']
    },
    {
        title: t('Mobile Map Application'),
        body: t('A mobile application for rating locations, built with Flutter and Dart, using Firebase for online storage.'),
        href: `/${lang}/building`,
        placeholderImg: '/media/mobile-rating-app.jpg',
        category: t('Web Programming'),
        teamSize: 1,
        technologies: ['flutter', 'dart', 'firebase']
    }
];

// Categorizing projects by type (Games, Web, Music, etc.)
function categorizeProjects(projects: Project[]): Record<string, Project[]> {
    return projects.reduce((acc: Record<string, Project[]>, project: Project) => {
        const { category } = project;
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(project);
        return acc;
    }, {});
}

// Filter functionality
let selectedCategory: string = t('All');

function filterProjects(category: string, projects: Project[]): Project[] {
    selectedCategory = category;
    if (category === t('All')) {
        return projects;
    } else {
        return projects.filter(project => project.category === category);
    }
}

let filteredProjects: Project[] = filterProjects(selectedCategory, projects);
---

<Layout title={t('My Portfolio')}>
    <Nav lang={lang} />
    <main>
        <!-- Projects Section -->
        <section id="projects">
            {Object.entries(categorizeProjects(filteredProjects)).map(([category, projects]) => (
                    <div>
                        <h3 class="category-header">{category}</h3>
                        <ul class="project-cards">
                            {projects.map(project => (
                                    <li>
                                        <ProjectCard project={project} />
                                    </li>
                            ))}
                        </ul>
                    </div>
            ))}
        </section>
    </main>
</Layout>

<style>
    /* Stylizing the category header */
    .category-header {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
        color: var(--accent-color);
        margin: 2rem 0;
        position: relative;
    }

    .category-header::after {
        content: '';
        display: block;
        width: 50%;
        height: 2px;
        background-color: var(--accent-color);
        margin: 0.5rem auto 0;
    }

    /* Project Cards: Fixed sizes */
    .project-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, 300px); /* Fixed card size */
        justify-content: center; /* Center the cards in the grid */
        gap: 1.5rem;
        list-style: none;
        padding: 0;
    }

    /* Responsive behavior is still intact */
    @media (min-width: 768px) {
        .project-cards {
            grid-template-columns: repeat(auto-fit, 300px);
        }
    }

    @media (min-width: 1024px) {
        .project-cards {
            grid-template-columns: repeat(auto-fit, 300px);
        }
    }
</style>